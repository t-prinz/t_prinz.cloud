---
#
# Create instances along with associated resources:
#
#   - instance
#   - elastic ip's
#   - route53 dns entries
#
# This assumes that the base environment has already been created

- name: gather information about the VPC
  amazon.aws.ec2_vpc_net_info:
    aws_access_key: "{{ aws_aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_aws_secret_key | default(omit) }}"
    filters:
      "tag:Name": "{{ aws_vpc_name }}"
    region: "{{ aws_region }}"
  register: vpc_info

- name: print VPC id information
  ansible.builtin.debug:
    var: vpc_info.vpcs[0].id
    verbosity: 1
  when: vpc_info.vpcs is defined

- name: get security group facts
  amazon.aws.ec2_group_info:
    aws_access_key: "{{ aws_aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_aws_secret_key | default(omit) }}"
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].id }}"
      group-name: "{{ aws_securitygroup_name }}"
  register: security_group_info
  when: vpc_info.vpcs is defined

- name: print security group info
  ansible.builtin.debug:
    var: security_group_info
    verbosity: 1

- name: print security group id info
  ansible.builtin.debug:
    var: security_group_info.security_groups[0].group_id
    verbosity: 1
  when: security_group_info is defined

- name: get subnet facts
  amazon.aws.ec2_vpc_subnet_info:
    aws_access_key: "{{ aws_aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_aws_secret_key | default(omit) }}"
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].id }}"
      "tag:Name": "{{ aws_subnet_name }}"
    region: "{{ aws_region }}"
  register: subnet_info
  when: vpc_info.vpcs is defined

- name: print subnet info
  ansible.builtin.debug:
    var: subnet_info
    verbosity: 1

- name: print subnet id info
  ansible.builtin.debug:
    var: subnet_info.subnets[0].id
    verbosity: 1
  when: subnet_info is defined

- name: Get the key information
  amazon.aws.ec2_key_info:
    include_public_key: true
    names: "{{ aws_keypair }}"
    region: "{{ aws_region }}"
  register: keyinfo

- name: Define variable to hold the public key
  ansible.builtin.set_fact:
    aws_keypair_public_key: "{{ keyinfo.keypairs[0].public_key }}"

- name: Define Windows user_data script
  ansible.builtin.set_fact:
    aws_user_data: "{{ lookup('template', 'win_ec2_user_data.ps1.j2') }}"
  when: aws_instance.aws_tags.instance_hvar_os_type == 'Windows'

- name: Define Linux user_data script
  ansible.builtin.set_fact:
    aws_user_data: "{{ lookup('template', 'linux_user_data.sh.j2') }}"
  when: aws_instance.aws_tags.instance_hvar_os_type == 'Linux'

- name: create and launch instance
  amazon.aws.ec2_instance:
    aws_access_key: "{{ aws_aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_aws_secret_key | default(omit) }}"
    image_id: "{{ aws_instance.aws_image_id }}"
    instance_type: "{{ aws_instance.aws_instance_type }}"
    key_name: "{{ aws_keypair }}"
    name: "{{ aws_instance.aws_tags.instance_hvar_basename }}"
    network_interfaces:
      - assign_public_ip: "{{ aws_instance.aws_assign_public_ip }}"
    region: "{{ aws_region }}"
    security_group: "{{ security_group_info.security_groups[0].group_id }}"
    state: started
    tags: "{{ aws_instance.aws_tags }}"
    user_data: "{{ aws_user_data | default(omit) }}"
#    user_data: "{{ lookup('template', 'win_ec2_user_data.ps1.j2') if (aws_instance.aws_tags.instance_hvar_os_type == 'Windows') else omit }}"
    volumes: "{{ aws_instance.aws_volume_list }}"
    vpc_subnet_id: "{{ subnet_info.subnets[0].id }}"
    wait: true
  register: instance_info

- name: print instance info
  ansible.builtin.debug:
    var: instance_info
    verbosity: 1

- name: Block to create an elastic IP and add a route53 DNS entry
  block:

    - name: Generate elastic IP for instances
      amazon.aws.ec2_eip:
        aws_access_key: "{{ aws_aws_access_key | default(omit) }}"
        aws_secret_key: "{{ aws_aws_secret_key | default(omit) }}"
        device_id: "{{ instance_info.instance_ids[0] }}"
        in_vpc: True
        region: "{{ aws_region }}"
        release_on_disassociation: yes
        state: present
      register: eip_info

    - name: print eip info
      ansible.builtin.debug:
        var: eip_info
        verbosity: 1

    - name: tag eip
      amazon.aws.ec2_tag:
        aws_access_key: "{{ aws_aws_access_key | default(omit) }}"
        aws_secret_key: "{{ aws_aws_secret_key | default(omit) }}"
        region: "{{ aws_region }}"
        resource: "{{ eip_info.allocation_id }}"
        state: present
        tags:
          Name: "{{ instance_info.instances[0].tags.Name }}"

    - name: print the dns name
      ansible.builtin.debug:
        msg: "hostname {{ instance_info.instances[0].tags.Name }}.{{ aws_route53_zone }} has IP {{ eip_info.public_ip }}"

    - name: Generate route53 entry for the elastic IP
      amazon.aws.route53:
        aws_access_key: "{{ aws_aws_access_key | default(omit) }}"
        aws_secret_key: "{{ aws_aws_secret_key | default(omit) }}"
        record: "{{ instance_info.instances[0].tags.Name }}.{{ aws_route53_zone }}"
        state: present
        ttl: 300
        type: A
        value: "{{ eip_info.public_ip }}"
        wait: Yes
        zone: "{{ aws_route53_zone }}"

  when: aws_instance.aws_assign_elastic_ip

- name: Print state of instance
  ansible.builtin.debug:
    msg: " Instance {{ instance_info.instances[0].tags.Name }} is {{ instance_info.instances[0].state.name }}"
    verbosity: 1
