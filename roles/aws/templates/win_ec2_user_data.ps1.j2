<powershell>

Set-NetConnectionProfile -NetworkCategory Private

$admin = [adsi]("WinNT://./administrator, user")
$admin.PSBase.Invoke("SetPassword", "{{ aws_instance.aws_windows_ansible_password }}")

<#

This was used to set up WinRM

Invoke-Expression ((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))
#>

<# This is for Ansible connectivity using OpenSSH

This installs OpenSSH and sets the default shell to powershell.  This is a combination from the following two sources:

https://docs.ansible.com/ansible/latest/os_guide/windows_ssh.html
https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=powershell&pivots=windows-server-2019

Note that 2 Ansible connection variables need to be defined:

ansible_connection: ssh (this doesn't seem to be required)
ansible_shell_type: powershell (or cmd if you don't change the default shell)

#>

# From Ansible documentation - install OpenSSH

Get-WindowsCapability -Name OpenSSH.Server* -Online |
    Add-WindowsCapability -Online
Set-Service -Name sshd -StartupType Automatic -Status Running

# From Windows documentation - make sure OpenSSH firewall rule exists

if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {
    Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
    New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
} else {
    Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
}

# From Ansible documentation - set the default shell to powershell

$shellParams = @{
    Path         = 'HKLM:\SOFTWARE\OpenSSH'
    Name         = 'DefaultShell'
    Value        = 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'
    PropertyType = 'String'
    Force        = $true
}
New-ItemProperty @shellParams

<#

This sets up the authorized key file for the Adminstrator user based on these references:

https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh-server-configuration
https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement?source=recommendations

#>

# Define a variable for the public key

$authorizedKey = "{{ aws_keypair_public_key }}"

# Create the authorized key file and set the permissions appropriately

Add-Content -Force -Path $env:ProgramData\ssh\administrators_authorized_keys -Value $authorizedKey
icacls.exe ""$env:ProgramData\ssh\administrators_authorized_keys"" /inheritance:r /grant ""Administrators:F"" /grant ""SYSTEM:F""

# Add a new user that is part of the Administrators group

$username = "{{ aws_instance.aws_windows_ansible_username }}"
$password = ConvertTo-SecureString -AsPlainText "{{ aws_instance.aws_windows_ansible_password }}" -Force
$fullname = 'Ansible User Account'
$description = 'Account used for Ansible automation'
$params = @{
    Name        = $username
    Password    = $password
    FullName    = $fullname
    Description = $description
}
New-LocalUser @params

Add-LocalGroupMember -Group "Administrators" -Member $username

</powershell>
